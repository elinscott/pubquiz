from dataclasses import dataclass
from typing import List, Optional
from pathlib import Path

@dataclass
class Question:
   question: str
   answer: str
   slide: Optional[List[str]] = None
   question_pic: Optional[Path] = None
   question_pic_height: float = 0.6
   answer_pic: Optional[Path] = None
   answer_pic_height: float = 0.6

   def __repr__(self):
      return self.question + ' (' + self.answer + ')'

   def to_slide(self, index, with_answer=False):

      # Allow manual override of as_slide(), to allow for more complex slides to be generated by hand
      if self.slide:
         return self.slide

      lines = [r"\begin{frame}",
                r"\begin{center}",
                r"\Large",
                f"{index}. {self.question}"]
      if self.question_pic:
         pic = r'\vspace{0.5em}'
         pic += '\includegraphics[height=' + self.question_pic_height + '\paperheight]{' + self.question_pic + '}'
         if with_answer and self.answer_pic:
            lines += [r'\\', '\only<1>{' + pic + '}']
         else:
            lines += [r'\\', pic]
      if with_answer:
         if self.answer_pic:
            pic = r'\vspace{0.5em}'
            pic += '\includegraphics[height=' + self.answer_pic_height + '\paperheight]{' + self.answer_pic + '}'
            if self.question_pic:
               lines += ['\only<2>{' + pic + '}']
            else:
               lines += [r'\\', '\onslide<2>{' + pic + '}']
         if self.answer:
            lines += [r"\\", r"\onslide<2->{\vspace{1em}\textit{" + self.answer + "}}"]
      lines += [r"\end{center}",
                r"\end{frame}"]

      return lines

